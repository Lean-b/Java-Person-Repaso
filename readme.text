La Programación Orientada a Objetos (POO) es un paradigma de programación que
se utiliza en el lenguaje de programación Java. La POO se basa en el concepto de
"objetos" que representan entidades del mundo real y se comunican entre sí a través de interacciones.

En Java, la POO se implementa mediante el uso de clases y objetos. Una clase es una
plantilla o modelo que define las propiedades y comportamientos que tendrán los
objetos creados a partir de ella. Por otro lado, un objeto es una instancia específica
 de una clase, que tiene su propio estado y puede realizar acciones específicas.

Aquí tienes algunos conceptos clave de la POO en Java:

Clase: Es la estructura básica que define las propiedades y
 comportamientos de un objeto. Define los atributos (variables)
  y los métodos (funciones) que un objeto de esa clase puede tener.
   Por ejemplo, si tienes una clase llamada "Coche", puedes definir
    atributos como "marca", "modelo" y métodos como "acelerar" o "frenar".

Objeto: Es una instancia específica de una clase. Un objeto se crea
 utilizando la palabra clave "new" seguida del nombre de la clase y
  paréntesis (). Por ejemplo, si tienes una clase "Coche", puedes crear
  un objeto llamado "miCoche" de la siguiente manera: "Coche miCoche = new Coche();".

Atributos: Son variables que representan las características o propiedades
de un objeto. Los atributos se definen dentro de una clase y se pueden acceder

y modificar a través de los objetos creados a partir de esa clase. Por ejemplo,
un atributo "marca" de la clase "Coche" puede tener el valor "Toyota" para un objeto específico.

Métodos: Son funciones que definen el comportamiento de un objeto. Los métodos
se definen dentro de una clase y se utilizan para realizar operaciones específicas
en los objetos. Pueden recibir parámetros y devolver valores. Por ejemplo, un método
"acelerar" de la clase "Coche" puede aumentar la velocidad del coche.

Encapsulación: Es un concepto que permite ocultar los detalles internos de una clase
y proporcionar una interfaz pública para interactuar con los objetos. Se utiliza para
proteger los datos de una clase y controlar su acceso. Esto se logra mediante el uso de
 modificadores de acceso como "private", "public" y "protected" para los atributos y métodos.

Herencia: Es un mecanismo que permite crear nuevas clases basadas en clases existentes.
La herencia permite que una clase adquiera los atributos y métodos de otra clase, lo que
promueve la reutilización de código. La clase base se conoce como "superclase" o "clase padre",
y la clase derivada se conoce como "subclase" o "clase hija". Las subclases pueden agregar nuevos
atributos y métodos, o modificar los existentes.

Polimorfismo: Es un concepto que permite que un objeto se comporte de diferentes formas
según el contexto. El polimorfismo se basa en la herencia y se logra mediante la sobrescritura
 de métodos en las subclases. Esto significa que una subclase puede proporcionar su propia
 implementación de un método heredado de la superclase.

